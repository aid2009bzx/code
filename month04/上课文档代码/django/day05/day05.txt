一 数据库操作
    1. F对象
        1.1 F对象的概念
              F对象表示某个字段的值，并没有获取到某个字段的值。
        1.2. 使用场合
              - 通常是对数据库中的字段值在不获取的情况下进行操作
       
       - 用于类属性(字段)之间的比较。
    2.原生的数据库操作方法-sql语句
       2.1 查询
             myModel.objects.raw('查询语句')，返回值类型是RawQuerySet 
       2.2 增删改 
             借助于cursor实现
 二 admin后台管理
     1. 创建管理员用户
         python3 manage.py createsuperuser
     2. Django的后台管理提供了完善用户权限功能
     3. 如何在后台管理界面中，添加用户自定义模型类的管理
三 数据表关联关系映射
    1. 一共有三种关系：
        一对一、一对多以及多对多。【创建表结构、添加数据、查询数据】
    2. 一对一
       对于一对一关系的两个表A和B。
       2.1 创建表结构
             一旦关联属性放到B表，这时，B表是从表；A表是主表
             首先创建一个应用 oto，并注册。在models.py添加模型类
             python3 manage.py makemigrations
             python3 manage.py migrate
      2.2  添加数据
             先主后从
             关联属性 ： 可以是对象，也可以是属性。
             wife1 = Wife.objects.create(name='王夫人',author=author1)
             wife2 = Wife.objects.create(name='张夫人',author_id=author2.id)
      2.3  查询数据
             2.3.1 直接通过关联属性查询  根据从表查询主表信息
                      wife1.author.name
             2.3.2 通过反向关联属性查询(隐藏属性)  根据主表查询从表信息
                      author1.wife.name
  3. 一对多
      3.1 创建表结构
            关联属性一定是放到"多"表中。"一"是主表；"多"是从表。
            创建一个应用otm，并注册，在models.py添加模型类
            python3 manage.py makemigrations
            python3 manage.py migrate
      3.2 添加数据
            先主后从
            先退出Django shell，然后重新进入，再添加数据，才能使用后添加的模型类。
            3.2.1 先创建主表数据，再创建从表数据
            3.2.2 高级创建方式，通过反向属性创建。
                     主表中有反向数据 关联类型名称小写_set
                     Publisher表关联的从表是Book，它的反向属性就是  book_set
     3.3 数据查询
           1. 正向查询，通过从表中关联属性查询。
               book.publisher.name    
           2. 反向查询，通过反向属性 book_set 查询数据
 4 多对多
    一对一 models.OneToOneField(A,on_delete=)
    一对多 models.ForeignKey(A,on_delete=)
    这种关系是两个表直接产生关系的
        
    属性 = models.ManyToManyField(MyModel)
    多对多的两个表之间没有直接关系。所以不会有on_delete的设置。
    在数据库层面上，多对多通过引入第三张表，变成两个一对多。                             
    4.1 创建表结构
          创建应用mtm，并注册，在models.py文件中创建模型类
          python3 manage.py startapp mtm
          python3 manage.py makemigrations
          python3 manage.py migrate                 
   4.2  添加数据
          4.2.1  方案1 先创建 author 再关联 book
          4.2.2  方案2 先创建 book 再关联 author  
  4.3  查询数据
         4.3.1 通过Book（有多对多属性authors）查所有作者【正向查询】
         4.3.2 通过Author(反向属性book_set)查询该作者所有的书【反向查询】
5 在后台管理中使用表关系进行操作
   模型类，最好重写一下它的__str__方法。
                             
             











   
    